What happens when you initialize a repository? Why do you need to do it?
You get .git inside the directory.  The directory becomes a repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
Staging area relates to the commit as not all files from the working directory get committed. Staging area is different
from the repository because it isn't actually part of the repository, it's just an intermediary step to commit changes to
the repo.

How can you use the staging area to make sure you have one commit per logical change?
git diff --staged will compare the staging area to the most recent commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are useful for when you want to experiment with additional components.  You don't want it to be part of the 
official product yet. Situations to use a branch include different uses for the general code (specific uses) and 
experimentation with something new. 

How do the diagrams help you visualize the branch structure?
It helps with flow (git log) and how different parts connect together.  Concept of reachability can be seen on a diagram.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A new branch with the histories of the previously two independent branches intact.  It almost is like a straight line when
you merge two branches together. We represent it in the diagram the way we do because it is intuitive to how we
perceive merge on a tree like structure.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros: Don't have to spend alot of time reading code: finding similarities and differences of 2 files and the original.
Cons: Sometimes automatic merging does not do the right thing.  Process is still ambiguous. What about code dependencies
and removing a piece of code that one person kept but another took out?