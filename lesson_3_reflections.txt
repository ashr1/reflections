When would you want to use a remote repository rather than keeping all your work local?
So that no matter which computer you work on locally, you can work on the latest versions of you work. Also,
if something happens to the computer you normally work on, your work is still on github.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Working with others is a situation where pulling yourself is better.  If you're working on a branch from the main master branch and your
code depends on the master currently in place, a auto pull could result in your work behaving differently as a result.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
forks: cloning an existing repository, happens all on github (no local repository). used to test others' code for yourself
clones: a general copy of a repository. can be used to initially get a repository onto your local computer.
branches: divergent commits from the main line of commits.  used for experimenting with new features also as a way to update
commit histories from local to github and vice versa.

What is the benefit of having a copy of the last known state of the remote stored locally?
You are aware of how far off you are from the remote repository in case of multiple commits locally.  Also when conflicts
arise in branches, there is a point in which everything was unified to work from when deciding how to resolve the conflicts.
When interacting with the remote, changes do not override your local work suddenly.  There is awareness on how things play out.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Collaborating without using either tools would be tedious having to send files back and forth.  We would have to meetup or 
talk about changes directly.  Moreover, we would have to scan every file for changes if the other person did not detail
what they did.  Collaborating without these tools would be easier in the sense that it relies on direct communication
with others.  Also, everyone would not have to go through the learning curve required initial for git(hub).

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Make changes in a separate branch when collaborating with others.  Get others' feedback before merging  onto the main branch.
Benefit on editing a separate branch is involving others.  Benefit on of editing the master itself is that it is simple since
one branch is involved, rather than having to keep track of different branches that seem like they don't even belong in the
project.
